name: Mock Deployment

on:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17 (adjust the version as per your project requirements)
      - name: Set up JDK 22
        uses: actions/setup-java@v2
        with:
         distribution: 'adopt'
         java-version: '22'

      - name: Set up Chrome
        run: |
         sudo apt-get update
         sudo apt-get install -y google-chrome-stable

      # Step 3: Cache Maven dependencies to speed up builds
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

            
      - name: Clear Maven Cache
        run: mvn dependency:purge-local-repository

     # - name: Build and Install Dependencies
      #  run: mvn clean install -X

      # Step 4: Build the project using Maven
      - name: Build with Maven
        run: mvn clean package
        
     

      # Step 5: Run unit tests using Maven
      - name: Run tests with Maven
        run: mvn test

 

      - name: List target directory
        run: ls -la target
        
      # Step 6: Mock the deployment process to a fake server
      - name: Mock Deployment to Fake Server
        run: |
          echo "Starting mock deployment to fake server..."
          
          # Simulate transferring files to a fake server (local directory in this case)
          DEPLOY_DIR="/tmp/fake-server"
          echo "Creating mock server directory at $DEPLOY_DIR"
          mkdir -p $DEPLOY_DIR
          echo "Copying application JAR to the mock server directory..."
          cp target/*.jar $DEPLOY_DIR/
          
          echo "Files deployed to mock server at $DEPLOY_DIR"

      # Step 7: Simulate interaction with a mocked external service (e.g., API)
      - name: Mock Interaction with External API
        run: |
          echo "Simulating interaction with an external service..."
          MOCK_API_URL="http://localhost:8080/api/deploy-status"
          echo "Sending deployment status to mock API: $MOCK_API_URL"
          
          # Simulate a mock API response using curl
          RESPONSE=$(curl -s -X POST $MOCK_API_URL -d '{"status": "successful"}')
          echo "Received mock API response: $RESPONSE"

      # Step 8: Simulate a health check after deployment
      - name: Mock Health Check on Server
        run: |
          echo "Simulating health check on the fake server..."
          
          # Simulate a server health check (mock check for deployed files)
          if [ -f /tmp/fake-server/*.jar ]; then
            echo "Health check passed! Application is up and running on mock server."
          else
            echo "Health check failed! Application is not deployed correctly."
            exit 1  # Exit with failure code if health check fails
          fi

      # Step 9: Mock notification (optional)
      - name: Notify Completion
        run: echo "Mock deployment completed successfully. Notifying stakeholders..."
